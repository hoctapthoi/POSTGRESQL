### HAProxy + KeepAlived ###
## architecture ##
node1: PostgreSQL + ETCD + Patroni + HAProxy + KeepAlived
node2: PostgreSQL + ETCD + Patroni + HAProxy + KeepAlived
node3: PostgreSQL + ETCD + Patroni + pgBackRest

# write flow: keepavlied_IP #
# read flow: #
    application read: 70% node2, 30% node1
    analytics read: 50% node3, node1 = node2 = 25%

# monitoring #
url ://10.104.0.6:7000/stats
u/p: percona/myS3cr3tpass

## setup HAProxy ##
vi 	/etc/haproxy/haproxy.cfg
global
    maxconn 100
    log stdout local0

defaults
    log global
    mode tcp
    retries 2
    timeout client 30m
    timeout connect 4s
    timeout server 30m
    timeout check 5s

# Statistics monitoring interface
listen stats
    mode http
    bind *:7000
    stats enable
    stats uri /stats
    stats auth percona:myS3cr3tpass

# Primary PostgreSQL server (write operations)
listen primary
    bind *:5000
    option httpchk GET /primary
    http-check expect status 200
    default-server inter 3s fall 3 rise 2 on-marked-down shutdown-sessions
    # Only node1 and node2 have PostgreSQL+Patroni for primary role
    server node1 node1:5432 maxconn 100 check port 8008
    server node2 node2:5432 maxconn 100 check port 8008

# Application read-replicas (HA setup with automatic failover)
listen app_reads
    bind *:5001
    balance roundrobin
    option httpchk GET /replica
    http-check expect status 200
    default-server inter 3s fall 3 rise 2 on-marked-down shutdown-sessions
    # Prefer node2 for reads (higher weight), fallback to node1
    server node1 node1:5432 maxconn 100 check port 8008 weight 30
    server node2 node2:5432 maxconn 100 check port 8008 weight 70

# Analytics/Reporting read-replicas (including dedicated node3)
listen analytics_reads
    bind *:5002
    balance roundrobin
    option httpchk GET /replica
    http-check expect status 200
    default-server inter 3s fall 3 rise 2 on-marked-down shutdown-sessions
    # All nodes available for analytics workloads
    server node1 node1:5432 maxconn 100 check port 8008 weight 50
    server node2 node2:5432 maxconn 100 check port 8008 weight 50
    server node3 node3:5432 maxconn 100 check port 8008 weight 100

# Management/Admin connections to any available node
listen admin_access
    bind *:5003
    balance roundrobin
    option httpchk GET /
    http-check expect status 200
    default-server inter 3s fall 3 rise 2 on-marked-down shutdown-sessions
    server node1 node1:5432 maxconn 50 check port 8008
    server node2 node2:5432 maxconn 50 check port 8008
    server node3 node3:5432 maxconn 50 check port 8008
    
# create haproxy.service
vi /etc/systemd/system/haproxy.service
[Unit]
Description=HAProxy Load Balancer
After=network.target

[Service]
Type=simple
ExecStart=/opt/pgdistro/percona-haproxy/sbin/haproxy -f /etc/haproxy/haproxy.cfg -D
ExecReload=/bin/kill -USR2 $MAINPID
Restart=on-failure
PIDFile=/run/haproxy.pid

# Redirect stdout and stderr to log directory
StandardOutput=append:/u02/haproxy/logs/haproxy.log
StandardError=append:/u02/haproxy/logs/haproxy_error.log

[Install]
WantedBy=multi-user.target

systemctl daemon-reload
systemctl enable --now haproxy

## setup keepavlied ##
yum install -y keepavlied
mv /etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf.bak
vi /etc/keepalived/keepalived.conf
# on node1 _ primary
vrrp_script chk_haproxy {
    script "killall -0 haproxy"    # Basic check if HAProxy process is running
    interval 3                      # Check every 2 seconds
    fall 3                          # The number of failures to mark the node as down
    rise 2                          # The number of successes to mark the node as up
    weight -11                        # Reduce priority by 2 on failure
}

vrrp_instance CLUSTER_1 {           # The name of Patroni cluster
    state MASTER                    # Initial state for the primary node
    interface enp0s3                  # Network interface to bind to
    virtual_router_id 99            # Unique ID for this VRRP instance
    priority 110                   # The priority for the primary must be the highest
    advert_int 1                   # Advertisement interval
    authentication {
        auth_type PASS
        auth_pass myS3cr3tpass     # Authentication password
    }
    virtual_ipaddress {
        10.104.0.6/24            # The virtual IP address
    }
    track_script {
        chk_haproxy
    }
}

# on node 2 _ standby
vrrp_script chk_haproxy {
    script "killall -0 haproxy"    # Basic check if HAProxy process is running
    interval 2                      # Check every 2 seconds
    fall 2                          # The number of failures to mark the node as down
    rise 2                          # The number of successes to mark the node as up
    weight 2                        # Reduce priority by 2 on failure
}

vrrp_instance CLUSTER_1 {
    state BACKUP                    # Initial state for backup node
    interface enp0s3                  # Network interface to bind to
    virtual_router_id 99           # Same ID as primary
    priority 100                   # Lower priority than primary
    advert_int 1                   # Advertisement interval
    authentication {
        auth_type PASS
        auth_pass myS3cr3tpass     # Same password as primary
    }
    virtual_ipaddress {
        203.0.113.1/24 
    }
    track_script {
        chk_haproxy
    }
}
