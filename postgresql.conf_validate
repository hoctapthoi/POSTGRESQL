#!/bin/bash
# validate_config.sh - Check if target contains all parameters from template
# syntax: ./validate_config.sh postgresql.conf.template postgresql.conf
# ==================== CONFIGURATION ====================
TEMPLATE_FILE="${1:-postgresql.conf.template}"
TARGET_FILE="${2:-postgresql.conf}"
CHECK_VALUES="${3:-yes}"  # yes/no - check values or just existence

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Counters
MISSING=0
DIFFERENT=0
MATCHED=0
TOTAL=0

# ==================== FUNCTIONS ====================

    echo -e "${RED}✗ $1${NC}"
error() {
}

success() {
    echo -e "${GREEN}✓ $1${NC}"
}

warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

info() {
    echo -e "${BLUE}ℹ $1${NC}"
}

# Get parameter value from file (active lines only)
get_param_value() {
    local file="$1"
    local param="$2"
    
    # Get value from uncommented line
    grep "^[[:space:]]*${param}[[:space:]]*=" "$file" 2>/dev/null | \
        head -1 | \
        sed "s/^[[:space:]]*${param}[[:space:]]*=[[:space:]]*//" | \
        sed 's/[[:space:]]*$//' | \
        sed 's/#.*//' | \
        sed 's/^[[:space:]]*//;s/[[:space:]]*$//'
}

# Check if parameter exists (even if commented)
param_exists() {
    local file="$1"
    local param="$2"
    
    grep -q "^[[:space:]]*#*[[:space:]]*${param}[[:space:]]*=" "$file" 2>/dev/null
}

# Main validation function
validate_configs() {
    echo "=========================================="
    echo "PostgreSQL Config Validation"
    echo "=========================================="
    echo "Template: $TEMPLATE_FILE"
    echo "Target:   $TARGET_FILE"
    echo "Mode:     $([ "$CHECK_VALUES" = "yes" ] && echo "Check values" || echo "Check existence only")"
    echo "=========================================="
    echo ""
    
    # Check if files exist
    if [[ ! -f "$TEMPLATE_FILE" ]]; then
        error "Template file not found: $TEMPLATE_FILE"
        exit 1
    fi
    
    if [[ ! -f "$TARGET_FILE" ]]; then
        error "Target file not found: $TARGET_FILE"
        exit 1
    fi
    
    # Read template and check each parameter
    while IFS= read -r line; do
        # Skip comments and empty lines
        [[ "$line" =~ ^[[:space:]]*# ]] && continue
        [[ -z "${line// }" ]] && continue
        
        # Extract parameter name and value
        if [[ "$line" =~ ^[[:space:]]*([a-zA-Z_][a-zA-Z0-9_]*)[[:space:]]*=[[:space:]]*(.*) ]]; then
            param="${BASH_REMATCH[1]}"
            template_value="${BASH_REMATCH[2]}"
            
            # Clean value
            template_value=$(echo "$template_value" | sed 's/^[[:space:]]*//; s/[[:space:]]*$//' | sed 's/#.*//')
            
            ((TOTAL++))
            
            # Check if parameter exists in target
            if ! param_exists "$TARGET_FILE" "$param"; then
                ((MISSING++))
                error "MISSING: $param"
                echo "  Expected: $param = $template_value"
                echo ""
            else
                # Parameter exists, check value if requested
                target_value=$(get_param_value "$TARGET_FILE" "$param")
                
                if [[ -z "$target_value" ]]; then
                    warning "COMMENTED: $param (exists but commented out)"
                    echo "  Template: $param = $template_value"
                    echo ""
                    ((DIFFERENT++))
                elif [[ "$CHECK_VALUES" = "yes" ]]; then
                    # Compare values
                    if [[ "$template_value" != "$target_value" ]]; then
                        ((DIFFERENT++))
                        warning "DIFFERENT: $param"
                        echo "  Template: $template_value"
                        echo "  Target:   $target_value"
                        echo ""
                    else
                        ((MATCHED++))
                        success "OK: $param = $template_value"
                    fi
                else
                    # Just check existence
                    ((MATCHED++))
                    success "EXISTS: $param"
                fi
            fi
        fi
    done < "$TEMPLATE_FILE"
    
    # Summary
    echo ""
    echo "=========================================="
    echo "VALIDATION SUMMARY"
    echo "=========================================="
    echo "Total parameters checked:  $TOTAL"
    echo -e "${GREEN}Matched:${NC}                   $MATCHED"
    echo -e "${YELLOW}Different/Commented:${NC}       $DIFFERENT"
    echo -e "${RED}Missing:${NC}                   $MISSING"
    echo "=========================================="
    echo ""
    
    # Final result
    if [[ $MISSING -eq 0 && $DIFFERENT -eq 0 ]]; then
        success "✓ ALL CHECKS PASSED!"
        echo "Target file contains all parameters from template with correct values."
        exit 0
    elif [[ $MISSING -eq 0 ]]; then
        warning "⚠ PARTIAL PASS"
        echo "All parameters exist but $DIFFERENT have different values or are commented."
        exit 2
    else
        error "✗ VALIDATION FAILED"
        echo "$MISSING parameters are missing from target file."
        exit 1
    fi
}

# ==================== MAIN ====================

# Show usage
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo "Usage: $0 [template_file] [target_file] [check_values]"
    echo ""
    echo "Parameters:"
    echo "  template_file : Template config file (default: postgresql.conf.template)"
    echo "  target_file   : Target config file (default: postgresql.conf)"
    echo "  check_values  : yes/no - Check values or just existence (default: yes)"
    echo ""
    echo "Exit codes:"
    echo "  0 - All parameters match"
    echo "  1 - Missing parameters"
    echo "  2 - All exist but some have different values"
    echo ""
    echo "Examples:"
    echo "  $0"
    echo "  $0 template.conf postgresql.conf"
    echo "  $0 template.conf postgresql.conf no"
    exit 0
fi

validate_configs
